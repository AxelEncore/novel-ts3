#!/usr/bin/env node

/**
 * SQLite Backup Script (replaces PostgreSQL pg_dump-based backup)
 * Creates a timestamped copy of the SQLite database file with optional gzip compression.
 */

const fs = require('fs');
const fsp = require('fs').promises;
const path = require('path');
const { createGzip } = require('zlib');
require('dotenv').config();

const DB_PATH = process.env.DB_PATH || path.join(__dirname, '..', 'encore_tasks.db');
const BACKUP_DIR = process.env.BACKUP_PATH || path.join(process.cwd(), 'backups');
const COMPRESS = process.env.BACKUP_COMPRESS !== 'false';
const RETENTION_DAYS = parseInt(process.env.BACKUP_RETENTION_DAYS || '30', 10);

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    compress: config.compress,
    schemaOnly: false,
    dataOnly: false,
    output: config.backupPath
  };
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--compress':
        options.compress = true;
        break;
      case '--no-compress':
        options.compress = false;
        break;
      case '--schema-only':
        options.schemaOnly = true;
        break;
      case '--data-only':
        options.dataOnly = true;
        break;
      case '--output':
        if (i + 1 < args.length) {
          options.output = args[++i];
        }
        break;
    }
  }
  
  return options;
}

// Ensure backup directory exists
async function ensureBackupDirectory(dir) {
  try {
    await fsp.access(dir);
  } catch {
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dir}`);
    await fsp.mkdir(dir, { recursive: true });
  }
}

function timestamp() {
  return new Date().toISOString().replace(/[:.]/g, '-').replace('T', '_').slice(0, -5);
}

async function copyFile(src, dest) {
  await fsp.copyFile(src, dest);
}

async function gzipFile(src, destGz) {
  return new Promise((resolve, reject) => {
    const rs = fs.createReadStream(src);
    const ws = fs.createWriteStream(destGz);
    const gz = createGzip({ level: 9 });
    rs.pipe(gz).pipe(ws);
    ws.on('close', resolve);
    ws.on('error', reject);
    rs.on('error', reject);
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
async function getFileSize(filePath) {
  const stats = await fs.stat(filePath);
  const bytes = stats.size;
  
  if (bytes === 0) return '0 B';
  
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
async function cleanupOldBackups(backupPath, retentionDays) {
  console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ ${retentionDays} –¥–Ω–µ–π...`);
  
  try {
    const files = await fsp.readdir(backupPath);
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
    
    let deletedCount = 0;
    
    for (const file of files) {
      const isBackup = file.endsWith('.db') || file.endsWith('.db.gz');
      if (!isBackup) continue;
      
      const filePath = path.join(backupPath, file);
      const stats = await fsp.stat(filePath);
      
      if (stats.mtime < cutoffDate) {
        await fsp.unlink(filePath);
        console.log(`  ‚úì –£–¥–∞–ª–µ–Ω: ${file}`);
        deletedCount++;
      }
    }
    
    if (deletedCount === 0) {
      console.log('  ‚úì –°—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`  ‚úì –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π`);
    }
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: ${error.message}`);
  }
}

// No external tools required for SQLite backup

async function createDatabaseBackup() {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');

  await ensureBackupDirectory(BACKUP_DIR);

  if (!fs.existsSync(DB_PATH)) {
    throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${DB_PATH}`);
  }

  const baseName = `encore_tasks_${timestamp()}.db`;
  const destPath = path.join(BACKUP_DIR, baseName);

  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`   –§–∞–π–ª –ë–î: ${DB_PATH}`);
  console.log(`   –§–∞–π–ª –∫–æ–ø–∏–∏: ${destPath}${COMPRESS ? ' (gz)' : ''}`);

  await copyFile(DB_PATH, destPath);
  if (COMPRESS) {
    await gzipFile(destPath, `${destPath}.gz`);
    await fsp.unlink(destPath);
  }

  console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log(`   –†–µ–∂–∏–º: –ø–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è`);
  }
  
  console.log('');
  
  const startTime = Date.now();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await createBackup(outputPath, options);
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    const fileSize = await getFileSize(outputPath);
    
    console.log('\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log(`   –§–∞–π–ª: ${outputPath}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${fileSize}`);
    console.log(`   –í—Ä–µ–º—è: ${duration} —Å–µ–∫—É–Ω–¥`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    await cleanupOldBackups(BACKUP_DIR, RETENTION_DAYS);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
    try {
      await fs.unlink(outputPath);
    } catch (unlinkError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }
    
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  // No required env vars for SQLite backup
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Encore Tasks\n');
  
  validateEnvironment();
  
  const options = parseArgs();
  
try {
    await createDatabaseBackup();
    
    console.log('\nüéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { createDatabaseBackup };